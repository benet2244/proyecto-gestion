version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: unless-stopped
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d # Directorio para scripts de inicializaci칩n
    networks:
      - app-network

  php-apache:
    build:
      context: ./php # Asumiendo que tienes un Dockerfile en una carpeta 'php'
    container_name: php-apache-server
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8080:80" # Expone el puerto 80 del contenedor al 8080 del host
    volumes:
      - ./backend:/var/www/html # Monta tu c칩digo PHP en el servidor web
    environment:
      # Pasa las variables de entorno de la DB al contenedor de PHP
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network

  next-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: next-app
    restart: unless-stopped
    depends_on:
      - php-apache
    ports:
      - "3000:3000"
    environment:
      # La URL base para que Next.js sepa d칩nde est치 el backend de PHP
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:8080
    networks:
      - app-network
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
